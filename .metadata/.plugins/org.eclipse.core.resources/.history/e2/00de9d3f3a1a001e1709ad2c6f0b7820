/* DataManager.java
 * Module 8 Assignment
 * Name: Brittany Kyncl
 * Date: 6.30.23
 * Course: CSD430
 * Database connection model class
 */
package kyncl_08.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import kyncl_08.bean.Plant;

public class DataManager {
	private String dbURL = "jdbc:mysql://localhost:3306/garden";
	private String dbUserName = "student1";
	private String dbPassword = "pass";

	public void setDbURL(String dbURL) {
		this.dbURL = dbURL;
	}

	public String getDbURL() {
		return dbURL;
	}

	public void setDbUserName(String dbUserName) {
		this.dbUserName = dbUserName;
	}

	public String getDbUserName() {
		return dbUserName;
	}

	public void setDbPassword(String dbPassword) {
		this.dbPassword = dbPassword;
	}

	public String getDbPassword() {
		return dbPassword;
	}

	public Connection getConnection() {
		Connection conn = null;
		try {
			conn = DriverManager.getConnection(getDbURL(), getDbUserName(), getDbPassword());
		} catch (SQLException e) {
			System.out.println("Could not connect to DB: " + e.getMessage());
		}
		return conn;
	}

	public void endConnection(Connection conn) {
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}
	}
	
	public void insertCategory(String categoryName) {
	    Connection conn = this.getConnection();
	    try {
	        // Prepared statement for inserting into plant_category table
	        PreparedStatement categoryInsertStatement = conn.prepareStatement("INSERT INTO plant_category (category_name) VALUES (?)");
	        categoryInsertStatement.setString(1, categoryName);
	        categoryInsertStatement.executeUpdate();

	        System.out.println("Category inserted successfully");
	    } catch (SQLException e) {
	        System.out.println("Error inserting category: " + e.getMessage());
	    } finally {
	        this.endConnection(conn);
	    }
	}

	public void insertFruit(String fruitName, int categoryId, String description, int quantity) {
	    Connection conn = null;
	    try {
	        conn = this.getConnection();

	        // Prepared statement for inserting into fruits table
	        PreparedStatement fruitsInsertStatement = conn.prepareStatement("INSERT INTO fruits (fruit_name, category_id, description, quantity) VALUES (?, ?, ?, ?)");
	        fruitsInsertStatement.setString(1, fruitName);
	        fruitsInsertStatement.setInt(2, categoryId);
	        fruitsInsertStatement.setString(3, description);
	        fruitsInsertStatement.setInt(4, quantity);
	        fruitsInsertStatement.executeUpdate();

	        System.out.println("Fruit inserted successfully");
	    } catch (SQLException e) {
	        System.out.println("Error inserting fruit: " + e.getMessage());
	    } finally {
	        this.endConnection(conn);
	    }
	}

	public void insertVegetable(String vegetableName, int categoryId, String description, int quantity) {
	    Connection conn = null;
	    try {
	        conn = this.getConnection();

	        // Prepared statement for inserting into vegetables table
	        PreparedStatement vegetablesInsertStatement = conn.prepareStatement("INSERT INTO vegetables (vegetable_name, category_id, description, quantity) VALUES (?, ?, ?, ?)");
	        vegetablesInsertStatement.setString(1, vegetableName);
	        vegetablesInsertStatement.setInt(2, categoryId);
	        vegetablesInsertStatement.setString(3, description);
	        vegetablesInsertStatement.setInt(4, quantity);
	        vegetablesInsertStatement.executeUpdate();

	        System.out.println("Vegetable inserted successfully");
	    } catch (SQLException e) {
	        System.out.println("Error inserting vegetable: " + e.getMessage());
	    } finally {
	        this.endConnection(conn);
	    }
	}

	public void insertHerb(String herbName, int categoryId, String description, int quantity) {
	    Connection conn = null;
	    try {
	        conn = this.getConnection();

	        // Prepared statement for inserting into herbs table
	        PreparedStatement herbsInsertStatement = conn.prepareStatement("INSERT INTO herbs (herb_name, category_id, description, quantity) VALUES (?, ?, ?, ?)");
	        herbsInsertStatement.setString(1, herbName);
	        herbsInsertStatement.setInt(2, categoryId);
	        herbsInsertStatement.setString(3, description);
	        herbsInsertStatement.setInt(4, quantity);
	        herbsInsertStatement.executeUpdate();

	        System.out.println("Herb inserted successfully");
	    } catch (SQLException e) {
	        System.out.println("Error inserting herb: " + e.getMessage());
	    } finally {
	        this.endConnection(conn);
	    }
	}
	
	public List<Plant> getAllPlants() {
	    List<Plant> plants = new ArrayList<>();
	    Connection conn = null;
	    PreparedStatement statement = null;
	    ResultSet resultSet = null;

	    try {
	        conn = this.getConnection();

	        // SQL query to retrieve all plants from all tables
	        String query = "SELECT p.plant_id, p.plant_name, p.description, p.quantity, c.category_id, c.category_name " +
	                "FROM plants p " +
	                "JOIN plant_category c ON p.category_id = c.category_id";

	        statement = conn.prepareStatement(query);
	        resultSet = statement.executeQuery();

	        while (resultSet.next()) {
	            Plant plant = new Plant();
	            plant.setPlantId(resultSet.getInt("plant_id"));
	            plant.setPlantName(resultSet.getString("plant_name"));
	            plant.setPlantDescription(resultSet.getString("description"));
	            plant.setQuantity(resultSet.getInt("quantity"));
	            plant.setCategoryId(resultSet.getInt("category_id"));
	            plant.setCategoryName(resultSet.getString("category_name"));

	            plants.add(plant);
	        }
	    } catch (SQLException e) {
	        System.out.println("Error retrieving plants: " + e.getMessage());
	    } finally {
	        // Close the resources
	        if (resultSet != null) {
	            try {
	                resultSet.close();
	            } catch (SQLException e) {
	                // Handle the exception
	            }
	        }
	        if (statement != null) {
	            try {
	                statement.close();
	            } catch (SQLException e) {
	                // Handle the exception
	            }
	        }
	        this.endConnection(conn);
	    }

	    return plants;
	}
	
}
