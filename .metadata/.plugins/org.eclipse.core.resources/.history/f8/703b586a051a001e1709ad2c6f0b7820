package kyncl_08.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CreateModel {
	private DataManager dataManager;
	
	public CreateModel(DataManager dataManager) {
		this.dataManager = dataManager;
	}
	
	public void createTables() {
		Connection conn = null;
        try {
        	conn = dataManager.getConnection();
        	
        	// Create the plant_category table
            PreparedStatement categoryStatement = conn.prepareStatement("CREATE TABLE IF NOT EXISTS plant_category ("
            		 + "category_id INT NOT NULL AUTO_INCREMENT,"
                     + "category_name VARCHAR(50) NOT NULL,"
                     + "plant_count INT NOT NULL DEFAULT 0,"
                     + "PRIMARY KEY (category_name)"
                     + ")");
            categoryStatement.execute();
            
            // Create fruits table
            PreparedStatement fruitsStatement = conn.prepareStatement("CREATE TABLE IF NOT EXISTS fruits ("
                    + "fruit_id INT NOT NULL AUTO_INCREMENT,"
                    + "fruit_name VARCHAR(50) NOT NULL,"
                    + "category_name VARCHAR(50) NOT NULL,"
                    + "FOREIGN KEY (category_name) REFERENCES plant_category(category_name),"
                    + "PRIMARY KEY (fruit_id)"
                    + ")");
            fruitsStatement.execute();
            
            // Create vegetables table
            PreparedStatement vegetablesStatement = conn.prepareStatement("CREATE TABLE IF NOT EXISTS vegetables ("
                    + "vegetable_id INT NOT NULL AUTO_INCREMENT,"
                    + "vegetable_name VARCHAR(50) NOT NULL,"
                    + "category_name VARCHAR(50) NOT NULL,"
                    + "FOREIGN KEY (category_name) REFERENCES plant_category(category_name),"
                    + "PRIMARY KEY (vegetable_id)"
                    + ")");
            vegetablesStatement.execute();
            
            // Create herbs table
            PreparedStatement herbsStatement = conn.prepareStatement("CREATE TABLE IF NOT EXISTS herbs ("
                    + "herb_id INT NOT NULL AUTO_INCREMENT,"
                    + "herb_name VARCHAR(50) NOT NULL,"
                    + "category_name VARCHAR(50) NOT NULL,"
                    + "FOREIGN KEY (category_name) REFERENCES plant_category(category_name),"
                    + "PRIMARY KEY (herb_id)"
                    + ")");
            herbsStatement.execute();
            
            // Create triggers for all tables (fruits, vegetables, herbs)
            createTriggers("fruits");
            createTriggers("vegetables");
            createTriggers("herbs");
            
            
            
        } catch (SQLException e) {
            System.out.println("Error creating table: " + e.getMessage());
        } finally {
            dataManager.endConnection(conn);
        }
	}
	
	public void createTriggers(String tableName) {
		Connection conn = null;
	    try {
	        conn = dataManager.getConnection();
	        
	        // Create trigger for inserting new records
	        PreparedStatement insertTriggerStatement = conn.prepareStatement("CREATE TRIGGER insert_trigger AFTER INSERT ON " + tableName + " "
	                + "FOR EACH ROW "
	                + "UPDATE plant_category "
	                + "SET plant_count = plant_count + 1 "
	                + "WHERE category_name = NEW.category_name");
	        insertTriggerStatement.execute();
	        
	        // Create trigger for deleting records
	        PreparedStatement deleteTriggerStatement = conn.prepareStatement("CREATE TRIGGER delete_trigger AFTER DELETE ON " + tableName + " "
	                + "FOR EACH ROW "
	                + "UPDATE plant_category "
	                + "SET plant_count = plant_count - 1 "
	                + "WHERE category_name = OLD.category_name");
	        deleteTriggerStatement.execute();
	        
	        // Create trigger for updating records
	        PreparedStatement updateTriggerStatement = conn.prepareStatement("CREATE TRIGGER update_trigger AFTER UPDATE ON " + tableName + " "
	                + "FOR EACH ROW "
	                + "IF OLD.category_name != NEW.category_name THEN "
	                + "UPDATE plant_category "
	                + "SET plant_count = plant_count - 1 "
	                + "WHERE category_name = OLD.category_name; "
	                + "UPDATE plant_category "
	                + "SET plant_count = plant_count + 1 "
	                + "WHERE category_name = NEW.category_name; "
	                + "END IF;");
	        updateTriggerStatement.execute();
	        
	    } catch (SQLException e) {
	        System.out.println("Error creating triggers: " + e.getMessage());
	    } finally {
	        dataManager.endConnection(conn);
	    }
	}
	
	public void insertData() {
		
	}
}
