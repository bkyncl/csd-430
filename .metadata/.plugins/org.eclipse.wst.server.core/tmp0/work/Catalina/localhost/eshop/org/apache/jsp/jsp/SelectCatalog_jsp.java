/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-07-11 20:50:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Iterator;
import eshop.beans.Book;

public final class SelectCatalog_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("eshop.beans.Book");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      eshop.model.DataManager dataManager = null;
      synchronized (application) {
        dataManager = (eshop.model.DataManager) _jspx_page_context.getAttribute("dataManager", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (dataManager == null){
          dataManager = new eshop.model.DataManager();
          _jspx_page_context.setAttribute("dataManager", dataManager, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\n');
 String base = (String)application.getAttribute("base"); 
      out.write("\n");
      out.write("<html>\r\n");
      out.write("<head>\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("  <title>Browse Catalog</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"/eshop/css/eshop.css\" type=\"text/css\"/>\r\n");
      out.write("  </head>\n");
      out.write("<body>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "TopMenu.jsp", out, true);
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "LeftMenu.jsp", out, true);
      out.write('\n');
     
  String categoryId = request.getParameter("id");
  String categoryName = null;
  if (categoryId != null && !categoryId.trim().equals("")) {
    try {
      categoryName = dataManager.getCategoryName(categoryId);
      }
    catch(NumberFormatException e) {}
    }
  if (categoryName != null) {
  
      out.write("\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("      <h2>Select Catalog</h2>\r\n");
      out.write("      <p>Category: <strong>");
      out.print(categoryName);
      out.write("</strong></p>\n");
      out.write("      <table>\n");
      out.write("        <tr>\n");
      out.write("          <th>Title</th>\n");
      out.write("          <th>Author</th>\n");
      out.write("          <th>Price</th>\n");
      out.write("          <th>Details</th>\n");
      out.write("          </tr>\n");

        ArrayList<Book> books = dataManager.getBooksInCategory(categoryId);
        Iterator<Book> iterator = books.iterator();
        while (iterator.hasNext()) {
          Book book = (Book)iterator.next();
          String pId = book.getId();
  
      out.write("\n");
      out.write("          <tr>\n");
      out.write("            <td>");
      out.print(book.getTitle());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(book.getAuthor());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(book.getPrice());
      out.write("</td>\n");
      out.write("            <td><a class=\"link1\"\n");
      out.write("              href=\"");
      out.print(base);
      out.write("?action=bookDetails&bookId=");
      out.print(pId);
      out.write("\">\n");
      out.write("              Details</a></td>\n");
      out.write("            </tr>\n");

          }
  
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("      </div>\r\n");

    }
  else {
	
      out.write("<p class=\"error\">Invalid category!</p>");

	}

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
