/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-07-11 20:51:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import eshop.BuildShopDB;
import java.sql.*;

public final class jdbc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("eshop.BuildShopDB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"ISO-8859-1\">\r\n");
      out.write("	<title>JDBC Test</title>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: #D9F9F2;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0px 20px 20px 20px;\r\n");
      out.write("        }        \r\n");
      out.write("        h2 {\r\n");
      out.write("            color: #130439;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("            text-decoration: underline;\r\n");
      out.write("\r\n");
      out.write("        }       \r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            border: 3px solid #130439;\r\n");
      out.write("            margin: 10px 0px;\r\n");
      out.write("        }    \r\n");
      out.write("        td {\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("        tr {\r\n");
      out.write("        background-color: #F7F5D3; /* Set the table rows fill color */\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	    tr:nth-child(even) {\r\n");
      out.write("	        background-color: #FBFBE8; /* Set the even rows fill color */\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	    tr:hover {\r\n");
      out.write("	        background-color: #EBEEED; /* Set the hover fill color */\r\n");
      out.write("	    }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

		BuildShopDB shop = new BuildShopDB();
	    
	    try {
	    	// create shop database 
	    	shop.createShop();	    	
	    } catch (SQLException e) {
	    	out.println("<br>Error");
			out.println("<br>Stack Trace: " + e.toString() + "<br>");
	    }
	    
	    try {
	    	// populate shop with tables and records
	    	shop.populateShop();	    	
	    } catch (SQLException e) {
	    	out.println("<br>Error");
			out.println("<br>Stack Trace: " + e.toString() + "<br>");
	    }
	    
	    // get the output from the database operations within BuildShopDB to append to HTML
	    String output = shop.getOutput();
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>Shop Database Initialization and Record Insertion</h2>\r\n");
      out.write("	");
      out.print( output );
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>Shop Database 'books' Table Query Results</h2>\r\n");
      out.write("	\r\n");
      out.write("	");

		// database connection variables
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		ResultSetMetaData rsMeta = null;
		
		// database connection parameters as defined in web.xml
		String url = application.getInitParameter("db-url");
		String username = application.getInitParameter("db-username");
		String password = application.getInitParameter("db-password");
    
		try {
			// Establish the database connection
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(url, username, password);
			stmt = conn.createStatement();
			out.println("Connection Established: " + url);
			
			// execute a query to retrieve all records from books table
			rs = stmt.executeQuery("SELECT * FROM books");
			out.println("<br>Displaying all from table: books");
			
			// display results formatted in HTML table
			
      out.write("<table border=\"1\">");

			rsMeta = rs.getMetaData();
			int nCols = rsMeta.getColumnCount();
			
      out.write("<tr>");

			for (int kCol = 1; kCol <= nCols; kCol++) {
				out.print("<td><b>" + rsMeta.getColumnName(kCol) + "</b></td>");
			}
			
      out.write("</tr>");

			while (rs.next()) {
				
      out.write("<tr>");

				for (int kCol = 1; kCol <= nCols; kCol++) {
					out.print("<td>" + rs.getString(kCol) + "</td>");
				}
				
      out.write("</tr>");

			}
			
      out.write("</table>");

		} catch (Exception e) {
			out.println("<br>Error");
			out.println("<br>Stack Trace: " + e.toString() + "<br>");
		} finally {
			try {
				// close all resources of db connection
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
				out.println("Connection closed: " + url);
			} catch (Exception e) {
				out.println("<br>Error on close");
				out.println("<br>Stack Trace: " + e.toString() + "<br>");
			}
		}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>Shop Database 'categories' Table Query Results</h2>\r\n");
      out.write("	\r\n");
      out.write("	");


    
		try {
			// Establish the database connection
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(url, username, password);
			stmt = conn.createStatement();
			out.println("Connection Established: " + url);
			
			// execute a query to retrieve all records from categories table
			rs = stmt.executeQuery("SELECT * FROM categories");
			out.println("<br>Displaying all from table: categories");
			
			// display results formatted in HTML table
			
      out.write("<table border=\"1\">");

			rsMeta = rs.getMetaData();
			int nCols = rsMeta.getColumnCount();
			
      out.write("<tr>");

			for (int kCol = 1; kCol <= nCols; kCol++) {
				out.print("<td><b>" + rsMeta.getColumnName(kCol) + "</b></td>");
			}
			
      out.write("</tr>");

			while (rs.next()) {
				
      out.write("<tr>");

				for (int kCol = 1; kCol <= nCols; kCol++) {
					out.print("<td>" + rs.getString(kCol) + "</td>");
				}
				
      out.write("</tr>");

			}
			
      out.write("</table>");

		} catch (Exception e) {
			out.println("<br>Error");
			out.println("<br>Stack Trace: " + e.toString() + "<br>");
		} finally {
			try {
				// close all resources of db connection
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
				out.println("Connection closed: " + url);
			} catch (Exception e) {
				out.println("<br>Error on close");
				out.println("<br>Stack Trace: " + e.toString() + "<br>");
			}
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
