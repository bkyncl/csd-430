/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-07-11 20:46:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>JSP Demo Expanded</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>Hello World! : (Book Example)</h2>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>Change Background Color : (My Example)</h2>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <form method=\"post\" action=\"\">\r\n");
      out.write("        <label for=\"color\">Select Color:</label>\r\n");
      out.write("        <select name=\"color\" id=\"color\">\r\n");
      out.write("            <option value=\"red\">Red</option>\r\n");
      out.write("            <option value=\"green\">Green</option>\r\n");
      out.write("            <option value=\"blue\">Blue</option>\r\n");
      out.write("        </select>\r\n");
      out.write("        <input type=\"submit\" value=\"Change\">\r\n");
      out.write("    </form>\r\n");
      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
 
    	String color = "";
        if (request.getMethod().equalsIgnoreCase("post")) {
        	// Retrieve the selected color from the request parameters
            color = request.getParameter("color");
        } else {
            color = request.getParameter("selectedColor");
        }
	
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("		 // Set the background color of the body using the selected color\r\n");
      out.write("		 document.body.style.backgroundColor = '");
      out.print( color );
      out.write("';\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h2>User Log In Form : (My Example)</h2>\r\n");
      out.write("	<form action=\"\" method=\"post\">\r\n");
      out.write("		<label>Enter User: \"admin\" Enter Password: \"secret\"</label><br>\r\n");
      out.write("		<label for=\"username\">Username:</label>\r\n");
      out.write("		<input type=\"text\" name=\"username\" id=\"username\" required><br>\r\n");
      out.write("		<label for=\"password\">Password:</label>\r\n");
      out.write("		<input type=\"password\" name=\"password\" id=\"password\" required><br>\r\n");
      out.write("		<input type=\"submit\" value=\"Login\">\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

		String username = request.getParameter("username");
		String password = request.getParameter("password");
		
		if (username != null && password != null) {
		  if (username.equals("admin") && password.equals("secret")) {
		    // Successful login
		    session.setAttribute("username", username);
		    out.println("<p>Log In Successfull.</p>");
		  } else {
		    // Invalid login
		    out.println("<p>Invalid username or password.</p>");
		  }
		}
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<h2>DB Connection Test : (My Example)</h2>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

        Connection conn = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        String url = "jdbc:mysql://localhost:3306/databasedb";
        String user = "student1";
        String pass = "pass";
        
        try {
            // Establish the database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(url,user,pass);

            out.println("Connection Success<br>");
         	// Perform a create if not exists query
            stmt = conn.createStatement();
         	stmt.execute("DROP TABLE IF EXISTS sample");
         	stmt.execute("CREATE TABLE IF NOT EXISTS sample (id INT PRIMARY KEY AUTO_INCREMENT, firstname VARCHAR(50), lastname VARCHAR(50))");
         	
         	// Prepare the statement for inserting data
            String insertQuery = "INSERT INTO sample (firstname, lastname) VALUES (?, ?), (?, ?), (?, ?),(?, ?)";
            pstmt = conn.prepareStatement(insertQuery);

            // Set the parameter values in the prepared statement
            pstmt.setString(1, "Jane");
            pstmt.setString(2, "Doe");
            pstmt.setString(3, "John");
            pstmt.setString(4, "Doe");
            pstmt.setString(5, "Sam");
            pstmt.setString(6, "Smith");
            pstmt.setString(7, "Sarah");
            pstmt.setString(8, "Jones");

            // Execute the insert statement
            pstmt.executeUpdate();
         	
         	// Perform a select query to fetch all rows from the table
            String selectQuery = "SELECT * FROM sample";
            rs = stmt.executeQuery(selectQuery);

         	// Print the table data in HTML table format
            out.println("<br>Sample Table Data:<br>");
            if (rs != null && rs.next()) {
                // Only print the table if the result set is not null and contains at least one row
                out.println("<table border='1'>");
                out.println("<tr><th>ID</th><th>First Name</th><th>Last Name</th></tr>");
                do {
                    int id = rs.getInt("id");
                    String firstName = rs.getString("firstname");
                    String lastName = rs.getString("lastname");
                    out.println("<tr><td>" + id + "</td><td>" + firstName + "</td><td>" + lastName + "</td></tr>");
                } while (rs.next());
                out.println("</table>");
            } else {
                // Display a message if the table is empty
                out.println("<br>No data in the table.<br>");
            }
            
        } catch (Exception e) {
            out.println(e.toString());
        } finally {
            // Close the database resources
            try {
            	if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                out.println(e.toString());
            }
        } 
	
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<form method=\"get\" action=\"extended.jsp\">\r\n");
      out.write("		<button type=\"submit\">To Example Page</button>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<form method=\"get\" action=\"cookie.jsp\">\r\n");
      out.write("		<button type=\"submit\">To Cookie Page</button>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
